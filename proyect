Ok, pues aquí va el inicio.

Primero tienes que entender qué es una Document Term Matrix: https://en.wikipedia.org/wiki/Document-term_matrix

Los documentos con los que jugaremos serán BOEs (análisis de políticas públicas), para empezar, descarga
10 BOEs cualesquiera. Ayuda: https://github.com/BOE-API/BOE_API
https://www.boe.es/datosabiertos/documentos/SumariosBOE_v_1_0.pdf

Luego, la aplicación buena sería crear un pequeño interfaz web que me permita descargar los boes
que quiera bajo unas condiciones de búsqueda, pero esto al final. No lo hagas ahora.

Queremos analizar en Spark esos documentos, cómo están legislando. Para ello necesitaras acceder
al texto del boe que suele ser un pdf o xml, investiga. Si es pdf tampoco es mayor problema: http://pdfbox.apache.org/

Ahora tenemos el texto de los documentos. Limpia el texto, todo a minúsculas, sin tildes ni signos de
puntuación como coma, punto, etc. Los caracteres alfanuméricos y números se eliminan.

Necesitamos considerar la lista de stopwords en español:
https://code.google.com/p/stop-words/source/browse/trunk/stop-words/stop-words/stop-words-spanish.txt?r=3
Yo ampliaría esta lista, me parecen pocas, pondría más. Las palabras en la lista de stopword no se consideran, no son relevantes.

Ahora viene lo bueno, necesitamos una mega matrix en Spark con tantas filas como documentos y
tantas columnas como palabras buenas, lo ideal, es que las columnas estén ordenadas alfabéticamente,
mira a ver si puedes hacerlo. Siempre se pone un control a la hora de generar la DTM, tamaño mínimo de la
palabra, por ejemplo, parametrízalo, que se pueda configurar, por ejemplo, nosotros solo consideraremos
palabras de longitud superior a tres letras (las de tres letras no).

Ayuda para el tema: https://gist.github.com/marianboda/469651cbcda0d92f02ee
http://spark.apache.org/docs/latest/mllib-feature-extraction.html
En esta última URL dice que "MLlib doesn’t provide tools for text segmentation.".
Mira a ver qué puede hacer actualmente Mlllib y qué no.

Si generas la DTM, puedes programar por ejemplo la siguiente función:

findFrecTerms(howMany, numMin) que se recorre la DTM y para cada documento devuelve las
primeras howMany palabras con número de apariciones en el documento superior a numMin

También puedes generar una función para hacer un wordcloud con las X palabras más empleadas,
a mayor utilización más grande la palabra.

Y lo último, podemos generar un gráfico con una serie temporal, buscar una forma de agrupar las X
palabras más empleadas por edición del BOE (fecha) y mostrarlas en otra gráfica.

A partir de ahí vemos si tiramos por clustering, visualización o qué.

**** stopworlist
algun
alguna
algunas
alguno
algunos
ambos
ampleamos
ante
antes
aquel
aquellas
aquellos
aqui
arriba
atras
bajo
bastante
bien
cada
cierta
ciertas
cierto
ciertos
como
con
conseguimos
conseguir
consigo
consigue
consiguen
consigues
cual
cuando
dentro
desde
donde
dos
el
ellas
ellos
empleais
emplean
emplear
empleas
empleo
en
encima
entonces
entre
era
eramos
eran
eras
eres
es
esta
estaba
estado
estais
estamos
estan
estoy
fin
fue
fueron
fui
fuimos
gueno
ha
hace
haceis
hacemos
hacen
hacer
haces
hago
incluso
intenta
intentais
intentamos
intentan
intentar
intentas
intento
ir
la
largo
las
lo
los
mientras
mio
modo
muchos
muy
nos
nosotros
otro
para
pero
podeis
podemos
poder
podria
podriais
podriamos
podrian
podrias
por
que
porque
primero
puede
pueden
puedo
quien
sabe
sabeis
sabemos
saben
saber
sabes
ser
si
siendo
sin
sobre
sois
solamente
solo
somos
soy
su
sus
también
teneis
tenemos
tener
tengo
tiempo
tiene
tienen
todo
trabaja
trabajais
trabajamos
trabajan
trabajar
trabajas
trabajo
tras
tuyo
ultimo
un
una
unas
uno
unos
usa
usais
usamos
usan
usar
usas
uso
va
vais
valor
vamos
van
vaya
verdad
verdadera
verdadero
vosotras
vosotros
voy
yo
tengo
tienes
tiene
tenemos
tenÃ©is
tienen
tenga
tengas
tengamos
tengais
tengan
tendra
tendr¡s
tendr¡
tendremos
tendris
tendrin
tendria
tendrias
tendriamos
tendriais
tendrian
tenia
tenias
teniamos
teniais
tenian
tuve
tuviste
tuvo
tuvimos
tuvisteis
tuvieron
tuviera
tuvieras
tuvieramos
tuvierais
tuvieran
tuviese
tuvieses
tuviesemos
tuvieseis
tuviesen
teniendo
tenido
tenida
tenidos
tenidas
tened

soy
eres
es
somos
sois
son
sea
seas
seamos
seais
sean
sere
sera¡s
sera¡
seremos
serais
ser¡n
seria
serias
seriamos
seriais
serian
era
eras
eramos
erais
eran
fui
fuiste
fue
fuimos
fuisteis
fueron
fuera
fueras
fueramos
fuerais
fueran
fuese
fueses
fuesemos
fueseis
fuesen
siendo
sido